-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.3 from Parser.y
-----------------------------------------------------------------------------

state 33 contains 16 shift/reduce conflicts.
state 35 contains 16 shift/reduce conflicts.

rule 2 is unused
rule 3 is unused
rule 4 is unused
rule 5 is unused
rule 6 is unused
rule 7 is unused
rule 8 is unused

terminal newline is unused
terminal "main" is unused
terminal "begin" is unused
terminal "end" is unused
terminal "return" is unused
terminal ";" is unused
terminal "(" is unused
terminal ")" is unused
terminal "[" is unused
terminal "]" is unused
terminal "{" is unused
terminal "}" is unused
terminal "Void" is unused
terminal "Int" is unused
terminal "Bool" is unused
terminal "Float" is unused
terminal "Char" is unused
terminal "String" is unused
terminal "Range" is unused
terminal "Union" is unused
terminal "Record" is unused
terminal "Type" is unused
terminal "=" is unused
terminal "def" is unused
terminal "as" is unused
terminal "::" is unused
terminal "->" is unused
terminal "read" is unused
terminal "print" is unused
terminal "if" is unused
terminal "then" is unused
terminal "else" is unused
terminal "unless" is unused
terminal "case" is unused
terminal "when" is unused
terminal "for" is unused
terminal "in" is unused
terminal "do" is unused
terminal "while" is unused
terminal "until" is unused
terminal "break" is unused
terminal "continue" is unused
terminal typeid is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Program                            (0)
	Program -> ExpressionList                          (1)
	DataType -> "Int"                                  (2)
	DataType -> "Float"                                (3)
	DataType -> "Bool"                                 (4)
	DataType -> "Char"                                 (5)
	DataType -> "String"                               (6)
	DataType -> "Range"                                (7)
	DataType -> "Type"                                 (8)
	Binary -> "+"                                      (9)
	Binary -> "-"                                      (10)
	Binary -> "*"                                      (11)
	Binary -> "/"                                      (12)
	Binary -> "%"                                      (13)
	Binary -> "^"                                      (14)
	Binary -> "or"                                     (15)
	Binary -> "and"                                    (16)
	Binary -> "=="                                     (17)
	Binary -> "/="                                     (18)
	Binary -> "<"                                      (19)
	Binary -> "<="                                     (20)
	Binary -> ">"                                      (21)
	Binary -> ">="                                     (22)
	Binary -> "@"                                      (23)
	Unary -> "-"                                       (24)
	Unary -> "not"                                     (25)
	Expression -> varid                                (26)
	Expression -> int                                  (27)
	Expression -> float                                (28)
	Expression -> "true"                               (29)
	Expression -> "false"                              (30)
	Expression -> char                                 (31)
	Expression -> string                               (32)
	Expression -> Expression ".." Expression           (33)
	Expression -> Expression Binary Expression         (34)
	Expression -> Unary Expression                     (35)
	ExpressionList -> Expression                       (36)
	ExpressionList -> ExpressionList "," Expression    (37)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	newline        { TkNewLine }
	"main"         { TkMain }
	"begin"        { TkBegin }
	"end"          { TkEnd }
	"return"       { TkReturn }
	";"            { TkSemicolon }
	","            { TkComma }
	"("            { TkLParen }
	")"            { TkRParen }
	"["            { TkLBrackets }
	"]"            { TkRBrackets }
	"{"            { TkLBraces }
	"}"            { TkRBraces }
	"Void"         { TkVoidType }
	"Int"          { TkIntType }
	"Bool"         { TkBoolType }
	"Float"        { TkFloatType }
	"Char"         { TkCharType }
	"String"       { TkStringType }
	"Range"        { TkRangeType }
	"Union"        { TkUnionType }
	"Record"       { TkRecordType }
	"Type"         { TkTypeType }
	"="            { TkAssign }
	"def"          { TkDef }
	"as"           { TkAs }
	"::"           { TkSignature }
	"->"           { TkArrow }
	"read"         { TkRead }
	"print"        { TkPrint }
	"if"           { TkIf }
	"then"         { TkThen }
	"else"         { TkElse }
	"unless"       { TkUnless }
	"case"         { TkCase }
	"when"         { TkWhen }
	"for"          { TkFor }
	"in"           { TkIn }
	".."           { TkFromTo }
	"do"           { TkDo }
	"while"        { TkWhile }
	"until"        { TkUntil }
	"break"        { TkBreak }
	"continue"     { TkContinue }
	int            { TkInt    $$ }
	"true"         { TkTrue   $$ }
	"false"        { TkFalse  $$ }
	float          { TkFloat  $$ }
	string         { TkString $$ }
	char           { TkChar   $$ }
	"+"            { TkPlus }
	"-"            { TkMinus }
	"*"            { TkTimes }
	"/"            { TkDivide }
	"%"            { TkModulo }
	"^"            { TkPower }
	"or"           { TkOr }
	"and"          { TkAnd }
	"not"          { TkNot }
	"@"            { TkBelongs }
	"=="           { TkEqual }
	"/="           { TkUnequal }
	"<"            { TkLess }
	">"            { TkGreat }
	"<="           { TkLessEq }
	">="           { TkGreatEq }
	varid          { TkVarId  $$ }
	typeid         { TkTypeId $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Program         rule  1
	DataType        rules 2, 3, 4, 5, 6, 7, 8
	Binary          rules 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
	Unary           rules 24, 25
	Expression      rules 26, 27, 28, 29, 30, 31, 32, 33, 34, 35
	ExpressionList  rules 36, 37

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	int            shift, and enter state 5
	"true"         shift, and enter state 6
	"false"        shift, and enter state 7
	float          shift, and enter state 8
	string         shift, and enter state 9
	char           shift, and enter state 10
	"-"            shift, and enter state 11
	"not"          shift, and enter state 12
	varid          shift, and enter state 13

	Program        goto state 14
	Unary          goto state 2
	Expression     goto state 3
	ExpressionList goto state 4

State 1


	int            shift, and enter state 5
	"true"         shift, and enter state 6
	"false"        shift, and enter state 7
	float          shift, and enter state 8
	string         shift, and enter state 9
	char           shift, and enter state 10
	"-"            shift, and enter state 11
	"not"          shift, and enter state 12
	varid          shift, and enter state 13

	Unary          goto state 2
	Expression     goto state 3
	ExpressionList goto state 4

State 2

	Expression -> Unary . Expression                    (rule 35)

	int            shift, and enter state 5
	"true"         shift, and enter state 6
	"false"        shift, and enter state 7
	float          shift, and enter state 8
	string         shift, and enter state 9
	char           shift, and enter state 10
	"-"            shift, and enter state 11
	"not"          shift, and enter state 12
	varid          shift, and enter state 13

	Unary          goto state 2
	Expression     goto state 33

State 3

	Expression -> Expression . ".." Expression          (rule 33)
	Expression -> Expression . Binary Expression        (rule 34)
	ExpressionList -> Expression .                      (rule 36)

	","            reduce using rule 36
	".."           shift, and enter state 17
	"+"            shift, and enter state 18
	"-"            shift, and enter state 19
	"*"            shift, and enter state 20
	"/"            shift, and enter state 21
	"%"            shift, and enter state 22
	"^"            shift, and enter state 23
	"or"           shift, and enter state 24
	"and"          shift, and enter state 25
	"@"            shift, and enter state 26
	"=="           shift, and enter state 27
	"/="           shift, and enter state 28
	"<"            shift, and enter state 29
	">"            shift, and enter state 30
	"<="           shift, and enter state 31
	">="           shift, and enter state 32
	%eof           reduce using rule 36

	Binary         goto state 16

State 4

	Program -> ExpressionList .                         (rule 1)
	ExpressionList -> ExpressionList . "," Expression    (rule 37)

	","            shift, and enter state 15
	%eof           reduce using rule 1


State 5

	Expression -> int .                                 (rule 27)

	","            reduce using rule 27
	".."           reduce using rule 27
	"+"            reduce using rule 27
	"-"            reduce using rule 27
	"*"            reduce using rule 27
	"/"            reduce using rule 27
	"%"            reduce using rule 27
	"^"            reduce using rule 27
	"or"           reduce using rule 27
	"and"          reduce using rule 27
	"@"            reduce using rule 27
	"=="           reduce using rule 27
	"/="           reduce using rule 27
	"<"            reduce using rule 27
	">"            reduce using rule 27
	"<="           reduce using rule 27
	">="           reduce using rule 27
	%eof           reduce using rule 27


State 6

	Expression -> "true" .                              (rule 29)

	","            reduce using rule 29
	".."           reduce using rule 29
	"+"            reduce using rule 29
	"-"            reduce using rule 29
	"*"            reduce using rule 29
	"/"            reduce using rule 29
	"%"            reduce using rule 29
	"^"            reduce using rule 29
	"or"           reduce using rule 29
	"and"          reduce using rule 29
	"@"            reduce using rule 29
	"=="           reduce using rule 29
	"/="           reduce using rule 29
	"<"            reduce using rule 29
	">"            reduce using rule 29
	"<="           reduce using rule 29
	">="           reduce using rule 29
	%eof           reduce using rule 29


State 7

	Expression -> "false" .                             (rule 30)

	","            reduce using rule 30
	".."           reduce using rule 30
	"+"            reduce using rule 30
	"-"            reduce using rule 30
	"*"            reduce using rule 30
	"/"            reduce using rule 30
	"%"            reduce using rule 30
	"^"            reduce using rule 30
	"or"           reduce using rule 30
	"and"          reduce using rule 30
	"@"            reduce using rule 30
	"=="           reduce using rule 30
	"/="           reduce using rule 30
	"<"            reduce using rule 30
	">"            reduce using rule 30
	"<="           reduce using rule 30
	">="           reduce using rule 30
	%eof           reduce using rule 30


State 8

	Expression -> float .                               (rule 28)

	","            reduce using rule 28
	".."           reduce using rule 28
	"+"            reduce using rule 28
	"-"            reduce using rule 28
	"*"            reduce using rule 28
	"/"            reduce using rule 28
	"%"            reduce using rule 28
	"^"            reduce using rule 28
	"or"           reduce using rule 28
	"and"          reduce using rule 28
	"@"            reduce using rule 28
	"=="           reduce using rule 28
	"/="           reduce using rule 28
	"<"            reduce using rule 28
	">"            reduce using rule 28
	"<="           reduce using rule 28
	">="           reduce using rule 28
	%eof           reduce using rule 28


State 9

	Expression -> string .                              (rule 32)

	","            reduce using rule 32
	".."           reduce using rule 32
	"+"            reduce using rule 32
	"-"            reduce using rule 32
	"*"            reduce using rule 32
	"/"            reduce using rule 32
	"%"            reduce using rule 32
	"^"            reduce using rule 32
	"or"           reduce using rule 32
	"and"          reduce using rule 32
	"@"            reduce using rule 32
	"=="           reduce using rule 32
	"/="           reduce using rule 32
	"<"            reduce using rule 32
	">"            reduce using rule 32
	"<="           reduce using rule 32
	">="           reduce using rule 32
	%eof           reduce using rule 32


State 10

	Expression -> char .                                (rule 31)

	","            reduce using rule 31
	".."           reduce using rule 31
	"+"            reduce using rule 31
	"-"            reduce using rule 31
	"*"            reduce using rule 31
	"/"            reduce using rule 31
	"%"            reduce using rule 31
	"^"            reduce using rule 31
	"or"           reduce using rule 31
	"and"          reduce using rule 31
	"@"            reduce using rule 31
	"=="           reduce using rule 31
	"/="           reduce using rule 31
	"<"            reduce using rule 31
	">"            reduce using rule 31
	"<="           reduce using rule 31
	">="           reduce using rule 31
	%eof           reduce using rule 31


State 11

	Unary -> "-" .                                      (rule 24)

	int            reduce using rule 24
	"true"         reduce using rule 24
	"false"        reduce using rule 24
	float          reduce using rule 24
	string         reduce using rule 24
	char           reduce using rule 24
	"-"            reduce using rule 24
	"not"          reduce using rule 24
	varid          reduce using rule 24


State 12

	Unary -> "not" .                                    (rule 25)

	int            reduce using rule 25
	"true"         reduce using rule 25
	"false"        reduce using rule 25
	float          reduce using rule 25
	string         reduce using rule 25
	char           reduce using rule 25
	"-"            reduce using rule 25
	"not"          reduce using rule 25
	varid          reduce using rule 25


State 13

	Expression -> varid .                               (rule 26)

	","            reduce using rule 26
	".."           reduce using rule 26
	"+"            reduce using rule 26
	"-"            reduce using rule 26
	"*"            reduce using rule 26
	"/"            reduce using rule 26
	"%"            reduce using rule 26
	"^"            reduce using rule 26
	"or"           reduce using rule 26
	"and"          reduce using rule 26
	"@"            reduce using rule 26
	"=="           reduce using rule 26
	"/="           reduce using rule 26
	"<"            reduce using rule 26
	">"            reduce using rule 26
	"<="           reduce using rule 26
	">="           reduce using rule 26
	%eof           reduce using rule 26


State 14

	%start_parse -> Program .                           (rule 0)

	%eof           accept


State 15

	ExpressionList -> ExpressionList "," . Expression    (rule 37)

	int            shift, and enter state 5
	"true"         shift, and enter state 6
	"false"        shift, and enter state 7
	float          shift, and enter state 8
	string         shift, and enter state 9
	char           shift, and enter state 10
	"-"            shift, and enter state 11
	"not"          shift, and enter state 12
	varid          shift, and enter state 13

	Unary          goto state 2
	Expression     goto state 36

State 16

	Expression -> Expression Binary . Expression        (rule 34)

	int            shift, and enter state 5
	"true"         shift, and enter state 6
	"false"        shift, and enter state 7
	float          shift, and enter state 8
	string         shift, and enter state 9
	char           shift, and enter state 10
	"-"            shift, and enter state 11
	"not"          shift, and enter state 12
	varid          shift, and enter state 13

	Unary          goto state 2
	Expression     goto state 35

State 17

	Expression -> Expression ".." . Expression          (rule 33)

	int            shift, and enter state 5
	"true"         shift, and enter state 6
	"false"        shift, and enter state 7
	float          shift, and enter state 8
	string         shift, and enter state 9
	char           shift, and enter state 10
	"-"            shift, and enter state 11
	"not"          shift, and enter state 12
	varid          shift, and enter state 13

	Unary          goto state 2
	Expression     goto state 34

State 18

	Binary -> "+" .                                     (rule 9)

	int            reduce using rule 9
	"true"         reduce using rule 9
	"false"        reduce using rule 9
	float          reduce using rule 9
	string         reduce using rule 9
	char           reduce using rule 9
	"-"            reduce using rule 9
	"not"          reduce using rule 9
	varid          reduce using rule 9


State 19

	Binary -> "-" .                                     (rule 10)

	int            reduce using rule 10
	"true"         reduce using rule 10
	"false"        reduce using rule 10
	float          reduce using rule 10
	string         reduce using rule 10
	char           reduce using rule 10
	"-"            reduce using rule 10
	"not"          reduce using rule 10
	varid          reduce using rule 10


State 20

	Binary -> "*" .                                     (rule 11)

	int            reduce using rule 11
	"true"         reduce using rule 11
	"false"        reduce using rule 11
	float          reduce using rule 11
	string         reduce using rule 11
	char           reduce using rule 11
	"-"            reduce using rule 11
	"not"          reduce using rule 11
	varid          reduce using rule 11


State 21

	Binary -> "/" .                                     (rule 12)

	int            reduce using rule 12
	"true"         reduce using rule 12
	"false"        reduce using rule 12
	float          reduce using rule 12
	string         reduce using rule 12
	char           reduce using rule 12
	"-"            reduce using rule 12
	"not"          reduce using rule 12
	varid          reduce using rule 12


State 22

	Binary -> "%" .                                     (rule 13)

	int            reduce using rule 13
	"true"         reduce using rule 13
	"false"        reduce using rule 13
	float          reduce using rule 13
	string         reduce using rule 13
	char           reduce using rule 13
	"-"            reduce using rule 13
	"not"          reduce using rule 13
	varid          reduce using rule 13


State 23

	Binary -> "^" .                                     (rule 14)

	int            reduce using rule 14
	"true"         reduce using rule 14
	"false"        reduce using rule 14
	float          reduce using rule 14
	string         reduce using rule 14
	char           reduce using rule 14
	"-"            reduce using rule 14
	"not"          reduce using rule 14
	varid          reduce using rule 14


State 24

	Binary -> "or" .                                    (rule 15)

	int            reduce using rule 15
	"true"         reduce using rule 15
	"false"        reduce using rule 15
	float          reduce using rule 15
	string         reduce using rule 15
	char           reduce using rule 15
	"-"            reduce using rule 15
	"not"          reduce using rule 15
	varid          reduce using rule 15


State 25

	Binary -> "and" .                                   (rule 16)

	int            reduce using rule 16
	"true"         reduce using rule 16
	"false"        reduce using rule 16
	float          reduce using rule 16
	string         reduce using rule 16
	char           reduce using rule 16
	"-"            reduce using rule 16
	"not"          reduce using rule 16
	varid          reduce using rule 16


State 26

	Binary -> "@" .                                     (rule 23)

	int            reduce using rule 23
	"true"         reduce using rule 23
	"false"        reduce using rule 23
	float          reduce using rule 23
	string         reduce using rule 23
	char           reduce using rule 23
	"-"            reduce using rule 23
	"not"          reduce using rule 23
	varid          reduce using rule 23


State 27

	Binary -> "==" .                                    (rule 17)

	int            reduce using rule 17
	"true"         reduce using rule 17
	"false"        reduce using rule 17
	float          reduce using rule 17
	string         reduce using rule 17
	char           reduce using rule 17
	"-"            reduce using rule 17
	"not"          reduce using rule 17
	varid          reduce using rule 17


State 28

	Binary -> "/=" .                                    (rule 18)

	int            reduce using rule 18
	"true"         reduce using rule 18
	"false"        reduce using rule 18
	float          reduce using rule 18
	string         reduce using rule 18
	char           reduce using rule 18
	"-"            reduce using rule 18
	"not"          reduce using rule 18
	varid          reduce using rule 18


State 29

	Binary -> "<" .                                     (rule 19)

	int            reduce using rule 19
	"true"         reduce using rule 19
	"false"        reduce using rule 19
	float          reduce using rule 19
	string         reduce using rule 19
	char           reduce using rule 19
	"-"            reduce using rule 19
	"not"          reduce using rule 19
	varid          reduce using rule 19


State 30

	Binary -> ">" .                                     (rule 21)

	int            reduce using rule 21
	"true"         reduce using rule 21
	"false"        reduce using rule 21
	float          reduce using rule 21
	string         reduce using rule 21
	char           reduce using rule 21
	"-"            reduce using rule 21
	"not"          reduce using rule 21
	varid          reduce using rule 21


State 31

	Binary -> "<=" .                                    (rule 20)

	int            reduce using rule 20
	"true"         reduce using rule 20
	"false"        reduce using rule 20
	float          reduce using rule 20
	string         reduce using rule 20
	char           reduce using rule 20
	"-"            reduce using rule 20
	"not"          reduce using rule 20
	varid          reduce using rule 20


State 32

	Binary -> ">=" .                                    (rule 22)

	int            reduce using rule 22
	"true"         reduce using rule 22
	"false"        reduce using rule 22
	float          reduce using rule 22
	string         reduce using rule 22
	char           reduce using rule 22
	"-"            reduce using rule 22
	"not"          reduce using rule 22
	varid          reduce using rule 22


State 33

	Expression -> Expression . ".." Expression          (rule 33)
	Expression -> Expression . Binary Expression        (rule 34)
	Expression -> Unary Expression .                    (rule 35)

	","            reduce using rule 35
	".."           shift, and enter state 17
			(reduce using rule 35)

	"+"            shift, and enter state 18
			(reduce using rule 35)

	"-"            shift, and enter state 19
			(reduce using rule 35)

	"*"            shift, and enter state 20
			(reduce using rule 35)

	"/"            shift, and enter state 21
			(reduce using rule 35)

	"%"            shift, and enter state 22
			(reduce using rule 35)

	"^"            shift, and enter state 23
			(reduce using rule 35)

	"or"           shift, and enter state 24
			(reduce using rule 35)

	"and"          shift, and enter state 25
			(reduce using rule 35)

	"@"            shift, and enter state 26
			(reduce using rule 35)

	"=="           shift, and enter state 27
			(reduce using rule 35)

	"/="           shift, and enter state 28
			(reduce using rule 35)

	"<"            shift, and enter state 29
			(reduce using rule 35)

	">"            shift, and enter state 30
			(reduce using rule 35)

	"<="           shift, and enter state 31
			(reduce using rule 35)

	">="           shift, and enter state 32
			(reduce using rule 35)

	%eof           reduce using rule 35

	Binary         goto state 16

State 34

	Expression -> Expression . ".." Expression          (rule 33)
	Expression -> Expression ".." Expression .          (rule 33)
	Expression -> Expression . Binary Expression        (rule 34)

	","            reduce using rule 33
	".."           reduce using rule 33
	"+"            reduce using rule 33
	"-"            reduce using rule 33
	"*"            reduce using rule 33
	"/"            reduce using rule 33
	"%"            reduce using rule 33
	"^"            shift, and enter state 23
	"or"           reduce using rule 33
	"and"          reduce using rule 33
	"@"            reduce using rule 33
	"=="           reduce using rule 33
	"/="           reduce using rule 33
	"<"            reduce using rule 33
	">"            reduce using rule 33
	"<="           reduce using rule 33
	">="           reduce using rule 33
	%eof           reduce using rule 33

	Binary         goto state 16

State 35

	Expression -> Expression . ".." Expression          (rule 33)
	Expression -> Expression . Binary Expression        (rule 34)
	Expression -> Expression Binary Expression .        (rule 34)

	","            reduce using rule 34
	".."           shift, and enter state 17
			(reduce using rule 34)

	"+"            shift, and enter state 18
			(reduce using rule 34)

	"-"            shift, and enter state 19
			(reduce using rule 34)

	"*"            shift, and enter state 20
			(reduce using rule 34)

	"/"            shift, and enter state 21
			(reduce using rule 34)

	"%"            shift, and enter state 22
			(reduce using rule 34)

	"^"            shift, and enter state 23
			(reduce using rule 34)

	"or"           shift, and enter state 24
			(reduce using rule 34)

	"and"          shift, and enter state 25
			(reduce using rule 34)

	"@"            shift, and enter state 26
			(reduce using rule 34)

	"=="           shift, and enter state 27
			(reduce using rule 34)

	"/="           shift, and enter state 28
			(reduce using rule 34)

	"<"            shift, and enter state 29
			(reduce using rule 34)

	">"            shift, and enter state 30
			(reduce using rule 34)

	"<="           shift, and enter state 31
			(reduce using rule 34)

	">="           shift, and enter state 32
			(reduce using rule 34)

	%eof           reduce using rule 34

	Binary         goto state 16

State 36

	Expression -> Expression . ".." Expression          (rule 33)
	Expression -> Expression . Binary Expression        (rule 34)
	ExpressionList -> ExpressionList "," Expression .    (rule 37)

	","            reduce using rule 37
	".."           shift, and enter state 17
	"+"            shift, and enter state 18
	"-"            shift, and enter state 19
	"*"            shift, and enter state 20
	"/"            shift, and enter state 21
	"%"            shift, and enter state 22
	"^"            shift, and enter state 23
	"or"           shift, and enter state 24
	"and"          shift, and enter state 25
	"@"            shift, and enter state 26
	"=="           shift, and enter state 27
	"/="           shift, and enter state 28
	"<"            shift, and enter state 29
	">"            shift, and enter state 30
	"<="           shift, and enter state 31
	">="           shift, and enter state 32
	%eof           reduce using rule 37

	Binary         goto state 16

-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 38
Number of terminals: 68
Number of non-terminals: 7
Number of states: 37
