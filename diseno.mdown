#Diseño

##Palabras reservadas
* *Comentarios* `--`
* *instrucciones*
    * `for`
    * `in`
    * `while`
    * `do`
    * `if`
    * `else`
    * `print`
    * `read`
* `union`
* `;`
* `+`
* `-`
* `*`
* `/`
* `^`
* `<`
* `>`
* `<=`
* `>=`
* `==`
* `/=`
* `{ }`
* `( )`
* `[ ]`
* `or`
* `and`

##Decisiones
*

###Tipos
* `Int`
* `Float`
* `Char`
* `String -- [Char]`
* `Array`




***

#Lenguaje de programación SUPERCOOL

SUPERCOOL es un lenguaje de programación de uso general desarrollado para la cadena de Lenguajes de Programación de la USB. El lenguaje es imperativo, con funciones, recursividad, comentarios, y de más.

##Estructura de un programa

Un programa en SUPERCOOL tiene la siguiente estructura:

    [<instrucción>]

Es una lista de instrucciones a ejecutar una tras otra. Un ejemplo de un programa básico en SUPERCOOL es:

    for i in [1..10] {
        print("numero: " ++ string(i) ++ "\n")
    }

##Identificadores

Un identificador en SUPERCOOL consiste de una cadena de caracteres de cualquier longitud que comienza por una letra minúscula (a-z), y es seguido por letras minúsculas (a-z), letras mayúscula (A-Z), dígitos (0-9) o el caracter guión bajo (_).

##Tipos de datos

Se dispone de los siguientes tipos de datos:
* `Void`: vacio, para funciones que no devuelven valores (aka "procedimientos").
* `Int`: números enteros con signo de N bits.
* `Bool`: representa un valor booleano o lógico, es decir `true` o `false`.
* `Float`: números flotantes de N bits, precisión y tal...
* `Char`: caracteres, UTF-8.
* `String`: cadenas de caracteres, escencialmente `[Char]`
* `[Array]`: arreglos de los otros tipos, no se permiten `[Void]`
* `def(Int,Bool) :: Void`: funciones, debe especificarse los tipos de entrada y salida.

##Instrucciones

###Instrucción vacia
Instrucción que no hace nada, *noop*. No tiene sintaxis.

###Asignación

    <variable> = <expresión>

Ejecutar esta instrucción tiene el efecto de evaluar la expresión del lado derecho y almacenarla en la variable del lado izquierdo. La variable tiene que haber sido declarada previamente y su tipo debe coincidir con el tipo de la expresión, en caso contrario debe arrojarse un error.

###Bloque??

Permite colocar una secuencia de instrucciones donde se requiera *una* instrucción. Su sintaxis es:

    {
        <instrucción1>;
        <instrucción2>;
        ...
        {
            <instrucción3>;
            <instrucción4>;
        }
        ...
        <instrucciónN-1>;
        <instrucciónN>
    }

Una secuencia de instrucciones separadas por `;`. Nótese que se utiliza el caracter `;` como separador, no como finalizador, por lo que la última instrucción de un bloque **no debe** terminar con `;`, puede gracias a la *instrucción vacía*.

Colocar `}` trae implicitamente un `;` al final, para poder hacer cosas del estilo: `x = 2; { y = x;; } x = 3` sin tener que colocar `;` despues de cerrar el bloque.

###Declaración

Declara una variable para el *alcance* actual.

    Tipo id;

Se escribe primero el `tipo` de la variable a declarar y luego el identificador de esta.

###Entrada

    read/scan ???

###Salida

    write/print ???

###Condicional

Condicional típico `if then else`
